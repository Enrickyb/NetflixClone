{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\enric\\\\Documents\\\\Projetos\\\\reactjs\\\\Netflix-React\\\\NetflixClone\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport FeaturedMovie from './components/FeaturedMovie/FeaturedMovie';\nimport Header from './components/Header/Header';\nimport MovieRow from './components/MovieRow/MovieRow';\nimport tmdb from './Tmdb';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [movieList, setMovieList] = useState([]);\n  const [featuredData, setFeaturedData] = useState(null);\n  const [blackHeader, setBlackHeader] = useState(false);\n  useEffect(() => {\n    const loadAll = async () => {\n      //pegando a lista total\n      let list = await tmdb.getHomeList();\n      setMovieList(list); //pegando featured\n\n      let originals = list.filter(i => i.slug === 'originals');\n      let randomChosen = Math.floor(Math.random() * (originals[0].items.results.length - 1));\n      let chosen = originals[0].items.results[randomChosen];\n      let chosenInfo = await tmdb.getMovieInfo(chosen.id, 'tv');\n      setFeaturedData(chosenInfo);\n    };\n\n    loadAll();\n  }, []);\n  useEffect(() => {\n    const scrollListener = () => {\n      if (window.scrollY > 10) {\n        set;\n      }\n    };\n\n    window.addEventListener('scroll', scrollListener);\n    return () => {\n      window.removeEventListener('scroll', scrollListener);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      black: blackHeader\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), featuredData && /*#__PURE__*/_jsxDEV(FeaturedMovie, {\n      item: featuredData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"lists\",\n      children: movieList.map((item, key) => /*#__PURE__*/_jsxDEV(MovieRow, {\n        title: item.title,\n        items: item.items\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"X/TsTIBWl4G5VJMk6QGmyiovK0c=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/enric/Documents/Projetos/reactjs/Netflix-React/NetflixClone/src/App.js"],"names":["useEffect","useState","FeaturedMovie","Header","MovieRow","tmdb","App","movieList","setMovieList","featuredData","setFeaturedData","blackHeader","setBlackHeader","loadAll","list","getHomeList","originals","filter","i","slug","randomChosen","Math","floor","random","items","results","length","chosen","chosenInfo","getMovieInfo","id","scrollListener","window","scrollY","set","addEventListener","removeEventListener","map","item","key","title"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAO,WAAP;AACA,OAAOC,aAAP,MAA0B,0CAA1B;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,QAAP,MAAqB,gCAArB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AAEb,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA2BP,QAAQ,CAAC,EAAD,CAAzC;AACA,QAAM,CAACQ,YAAD,EAAeC,eAAf,IAAiCT,QAAQ,CAAC,IAAD,CAA/C;AACA,QAAM,CAACU,WAAD,EAAcC,cAAd,IAA+BX,QAAQ,CAAC,KAAD,CAA7C;AAGAD,EAAAA,SAAS,CAAC,MAAI;AACZ,UAAMa,OAAO,GAAG,YAAW;AAEzB;AACA,UAAIC,IAAI,GAAG,MAAMT,IAAI,CAACU,WAAL,EAAjB;AACAP,MAAAA,YAAY,CAACM,IAAD,CAAZ,CAJyB,CAMzB;;AACA,UAAIE,SAAS,GAAGF,IAAI,CAACG,MAAL,CAAYC,CAAC,IAAEA,CAAC,CAACC,IAAF,KAAW,WAA1B,CAAhB;AACA,UAAIC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBP,SAAS,CAAC,CAAD,CAAT,CAAaQ,KAAb,CAAmBC,OAAnB,CAA2BC,MAA3B,GAAoC,CAArD,CAAX,CAAnB;AACA,UAAIC,MAAM,GAAGX,SAAS,CAAC,CAAD,CAAT,CAAaQ,KAAb,CAAmBC,OAAnB,CAA2BL,YAA3B,CAAb;AACA,UAAIQ,UAAU,GAAG,MAAMvB,IAAI,CAACwB,YAAL,CAAkBF,MAAM,CAACG,EAAzB,EAA6B,IAA7B,CAAvB;AACApB,MAAAA,eAAe,CAACkB,UAAD,CAAf;AACD,KAZD;;AAcAf,IAAAA,OAAO;AACR,GAhBQ,EAgBP,EAhBO,CAAT;AAiBAb,EAAAA,SAAS,CAAC,MAAI;AACZ,UAAM+B,cAAc,GAAG,MAAK;AAC1B,UAAGC,MAAM,CAACC,OAAP,GAAiB,EAApB,EAAwB;AACtBC,QAAAA,GAAG;AACJ;AACF,KAJD;;AAKAF,IAAAA,MAAM,CAACG,gBAAP,CAAwB,QAAxB,EAAkCJ,cAAlC;AACA,WAAO,MAAI;AACTC,MAAAA,MAAM,CAACI,mBAAP,CAA2B,QAA3B,EAAqCL,cAArC;AACD,KAFD;AAGD,GAVQ,EAUP,EAVO,CAAT;AAaA,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAEpB;AAAf;AAAA;AAAA;AAAA;AAAA,YADF,EAGEF,YAAY,iBAAI,QAAC,aAAD;AAAe,MAAA,IAAI,EAAEA;AAArB;AAAA;AAAA;AAAA;AAAA,YAHlB,eAME;AAAS,MAAA,SAAS,EAAC,OAAnB;AAAA,gBACGF,SAAS,CAAC8B,GAAV,CAAc,CAACC,IAAD,EAAOC,GAAP,kBACT,QAAC,QAAD;AAAoB,QAAA,KAAK,EAAED,IAAI,CAACE,KAAhC;AAAuC,QAAA,KAAK,EAAEF,IAAI,CAACd;AAAnD,SAAee,GAAf;AAAA;AAAA;AAAA;AAAA,cADL;AADH;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;;GApDQjC,G;;KAAAA,G;AAsDT,eAAeA,GAAf","sourcesContent":["import { useEffect, useState } from 'react';\nimport './App.css';\nimport FeaturedMovie from './components/FeaturedMovie/FeaturedMovie';\nimport Header from './components/Header/Header';\nimport MovieRow from './components/MovieRow/MovieRow';\nimport tmdb from './Tmdb'\n\nfunction App() {\n\n  const [movieList, setMovieList]= useState([])\n  const [featuredData, setFeaturedData]= useState(null)\n  const [blackHeader, setBlackHeader]= useState(false)\n\n\n  useEffect(()=>{\n    const loadAll = async () =>{\n     \n      //pegando a lista total\n      let list = await tmdb.getHomeList()\n      setMovieList(list)\n\n      //pegando featured\n      let originals = list.filter(i=>i.slug === 'originals')\n      let randomChosen = Math.floor(Math.random() * (originals[0].items.results.length - 1))\n      let chosen = originals[0].items.results[randomChosen]\n      let chosenInfo = await tmdb.getMovieInfo(chosen.id, 'tv')\n      setFeaturedData(chosenInfo)\n    }\n\n    loadAll()\n  },[])\n  useEffect(()=>{\n    const scrollListener = () =>{\n      if(window.scrollY > 10) {\n        set\n      }\n    }\n    window.addEventListener('scroll', scrollListener)\n    return ()=>{\n      window.removeEventListener('scroll', scrollListener)\n    }\n  },[])\n\n\n  return (\n    <div className='page'>\n      <Header black={blackHeader}></Header>\n      {\n      featuredData && <FeaturedMovie item={featuredData}/>\n      }\n\n      <section className='lists'>\n        {movieList.map((item, key)=>(\n              <MovieRow key={key} title={item.title} items={item.items}></MovieRow>\n              ))}\n      </section>\n      \n    </div>\n  );\n} \n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}